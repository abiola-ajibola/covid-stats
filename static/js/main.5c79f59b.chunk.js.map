{"version":3,"sources":["components/header/index.js","components/carousel/card/index.js","components/carousel/Cardslist.js","components/news-pane/index.js","components/stats/index.js","components/searchbar/index.js","components/Modal/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Newscard","data","image","src","url","alt","title","excerpt","href","webUrl","target","rel","provider","domain","name","Cardslist","news","images","map","card","i","key","Newspane","Statsboard","globalBreakdowns","fetchHistory","location","countryOrRegion","onClick","isoCode","totalConfirmedCases","id","newlyConfirmedCases","totalRecoveredCases","newlyRecoveredCases","totalDeaths","newDeaths","Searchbar","onChange","type","placeholder","htInner","htOuter","window","innerWidth","Chart","close","graphData","countryName","width","height","margin","top","right","bottom","left","dataKey","dot","stroke","value","offset","position","App","props","componentDidMount","fetch","method","headers","then","response","json","setState","globalHistory","stats","history","breakdowns","filteredBreakdowns","imagesArr","item","state","countryHistory","searchfield","openModal","handleInput","bind","closeModal","event","this","console","log","res","newHistory","detail","Object","assign","date","Date","toDateString","slice","catch","e","alert","filter","countryStat","toLocaleLowerCase","includes","open","onClose","children","React","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5c79f59b.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst Header = () => {\n\n    return (\n        <header className='container head'>\n            <div className='item'>\n                <h1 className='big'>\n                    COVID-19\n                </h1>\n                <h3 className='small'>\n                    Corona Virus Disease 2019 <span className='small-header'>statistics</span>\n                </h3>\n            </div>\n        </header>)\n}\n\nexport default Header;\n","import React from 'react';\nimport './index.css'\n\nconst Newscard = ({ data, image }) => {\n\n    return (\n        <div className='card-container'>\n            <article className=\"news-item\">\n                <div>\n                    <img src={image.url} className='news-image' alt={image.title} />\n                </div>\n                <h4> {data.title} </h4>\n                <p> {data.excerpt} </p>\n                <p className='card-links'>\n                    <a href={data.webUrl} target='_blank' className='read' rel=\"noopener noreferrer\" > Read more... </a>\n                    <a href={`https://www.${data.provider.domain}`} target='_blank' className='provider-name' rel=\"noopener noreferrer\" > {data.provider.name} </a>\n                </p>\n            </article>\n        </div>\n    )\n\n}\n\nexport default Newscard;\n","import React, { Fragment } from 'react';\nimport Newscard from './card';\n\nconst Cardslist = ({ news, images }) => {\n\n    return (\n        <Fragment>\n            <div className='first-group'>{\n                news.map((card, i) => <Newscard key={i} data={card} image={images[i]} />)\n            }\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Cardslist;\n","import React from 'react';\nimport './index.css';\nimport Cardslist from '../carousel/Cardslist';\n\nconst Newspane = ({ news, images}) => {\n\n    return (\n        <aside className=\"news-container main-item\">\n            <Cardslist news={news} images={images}/>\n        </aside>\n    )\n}\n\nexport default Newspane;\n","import React, { Fragment } from 'react';\nimport './index.css';\n\nconst Statsboard = ({ globalBreakdowns, fetchHistory }) => {\n\n    return (\n        <main className=\"board-container main-item\">\n            <div className=\"board-item\">\n                <div className='stat'>\n                    <div className=\"flag-title\">Flag</div>\n                    <div className=\"country\">Country</div>\n                    <div className=\"confirmed\">Confirmed</div>\n                    <div className=\"recovered\">Recovered</div>\n                    <div className=\"death\">Death</div>\n                </div>\n            </div>\n\n            {\n                globalBreakdowns.map((data, i) => {\n                    return (\n                        <Fragment key={data.location.countryOrRegion}>\n                            <div className=\"board-item\" onClick={() => fetchHistory(data.location.isoCode)}>\n                                <div className='stat'>\n                                    <img className=\"flag\"\n                                        src={`https://www.countryflags.io/${data.location.isoCode}/flat/64.png`}\n                                        alt='flag'\n                                    />\n                                    <div className=\"country\">{data.location.countryOrRegion}</div>\n                                    <div className=\"confirmed\">\n                                        {`${data.totalConfirmedCases}`}\n                                        <span id=\"plus\">\n                                            {` + ${data.newlyConfirmedCases}`}\n                                        </span>\n                                    </div>\n                                    <div className=\"recovered\">\n                                        {`${data.totalRecoveredCases}`}\n                                        <span id=\"plus\">\n                                            {` + ${data.newlyRecoveredCases}`}\n                                        </span>\n                                    </div>\n                                    <div className=\"death\">\n                                        {`${data.totalDeaths}`}\n                                        <span id=\"plus\">\n                                            {` + ${data.newDeaths}`}\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>\n                        </Fragment>\n                    );\n                })\n            }\n\n        </main>\n    )\n}\n\nexport default Statsboard;","import React from 'react';\nimport \"./index.css\";\n\nconst Searchbar = ({onChange}) => {\n    \n    return (\n        <input className='input' type='search' placeholder=\"Search Countries\" onChange={onChange}></input>\n    )\n}\n\nexport default Searchbar;\n","import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, Label } from 'recharts';\nvar htInner = 400;\nvar htOuter = 450;\nif (window.innerWidth < 850) {\n     htInner = 320;\n     htOuter = 300;\n}\n\nconst Chart = ({ close, graphData, countryName }) => {\n\n    return (\n        <div>\n            <button onClick={close}>close</button>\n            <ResponsiveContainer width='100%' height={htOuter}>\n                <LineChart height={htInner} data={graphData} margin={{ top: 5, right: 15, bottom: 5, left: 15 }}>\n                    <Line type=\"monotone\" dataKey=\"confirmed\" dot={false} stroke=\"red\" />\n                    <Line type=\"monotone\" dataKey=\"deaths\" dot={false} stroke=\"black\" />\n                    <Line type=\"monotone\" dataKey=\"recovered\" dot={false} stroke=\"green\" />\n                    <XAxis dataKey=\"date\">\n                        <Label value={countryName} offset={300} position=\"top\" />\n                    </XAxis>\n                    <YAxis />\n                    <Legend />\n                    <Tooltip />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default Chart;\n","import React, { Fragment } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Newspane from './components/news-pane';\nimport Statsboard from './components/stats';\nimport Searchbar from './components/searchbar';\nimport Chart from './components/Modal';\nimport Modal from '@material-ui/core/Modal';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      globalHistory: [],\n      countryHistory: [],\n      globalBreakdowns: [],\n      filteredBreakdowns: [],\n      news: [],\n      countryName: '',\n      images: [],\n      searchfield: '',\n      openModal: false\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.fetchHistory = this.fetchHistory.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  componentDidMount = () => {\n    fetch('https://api.smartable.ai/coronavirus/stats/global', {\n      method: 'get',\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Subscription-Key\": \"d383a676794343deab023ff0a5a7f2e5\"\n      }\n    })\n      .then(response => response.json())\n      .then(data => this.setState({\n        globalHistory: data.stats.history,\n        globalBreakdowns: data.stats.breakdowns,\n        filteredBreakdowns: data.stats.breakdowns\n      }))\n\n    fetch('https://api.smartable.ai/coronavirus/news/global', {\n      method: 'get',\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Subscription-Key\": \"d383a676794343deab023ff0a5a7f2e5\"\n      }\n    })\n      .then(response => response.json())\n      .then(data => data.news)\n      .then(news => {\n        let imagesArr = [];\n        imagesArr = news.map((item) => {\n          if (item.images === null) {\n            return {\n              url: '',\n              title: ''\n            }\n          }\n          return item.images[0];\n        })\n        this.setState({\n          news: news,\n          images: imagesArr\n        });\n      })\n  }\n\n  handleInput(event) {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  fetchHistory(isoCode) {\n    if (isoCode !== null) {\n      console.log('Preparing to fetch: ', isoCode);\n      this.setState({\n        openModal: true\n      });\n\n      console.log('Fetching', isoCode)\n      fetch(`https://api.smartable.ai/coronavirus/stats/${isoCode}`, {\n        method: 'get',\n        headers: {\n          \"content-type\": \"application/json\",\n          \"Subscription-Key\": \"d383a676794343deab023ff0a5a7f2e5\"\n        }\n      })\n        .then(res => res.json())\n        .then(data => {\n          this.setState({ countryName: data.location.countryOrRegion })\n          return data.stats\n        })\n        .then(stats => stats.history)\n        .then(history => {\n          let newHistory = history.map(detail => {\n            return Object.assign({}, detail, { date: new Date(detail.date).toDateString().slice(4, 10) })\n          })\n          this.setState((state) => {\n            return {\n              countryHistory: newHistory\n            }\n          })\n        })\n        .catch(e => console.log('Error!', e))\n    } else {\n      alert(`Sorry! data not available :(`)\n    }\n  }\n\n  closeModal() {\n    this.setState({ openModal: false });\n  }\n\n  render() {\n    const { news, images, openModal, countryHistory } = this.state;\n    const filteredBreakdowns = this.state.globalBreakdowns.filter(countryStat => {\n      return countryStat.location.countryOrRegion.toLocaleLowerCase().includes(this.state.searchfield.toLocaleLowerCase())\n    });\n\n    return (\n      <Fragment>\n        <Header />\n        <Modal\n          open={openModal}\n          onClose={this.closeModal}\n          children={\n            <div className=\"modal-container\">\n              <Chart graphData={countryHistory} close={this.closeModal} countryName={this.state.countryName} />\n            </div>\n          }\n        />\n        <Searchbar onChange={this.handleInput} />\n        <div className=\"main-container\">\n          <Statsboard globalBreakdowns={filteredBreakdowns} fetchHistory={this.fetchHistory} />\n          <Newspane news={news} images={images} />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}